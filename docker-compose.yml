services:
  flyway:
    container_name: flyway
    image: flyway/flyway:11.7
    depends_on:
      - postgres
    volumes:
      - ./postgres-db/migration:/flyway/migration
    command: -url=jdbc:postgresql://postgres:5432/high_load_db -user=postgres -password=example -locations=filesystem:/flyway/migration migrate
    networks:
      - server-network

  api-gateway:
    build:
      context: api-gateway
      dockerfile: Dockerfile
    image: api-gateway
    container_name: api-gateway
    environment:
      EUREKA_URI: http://eureka:8761/eureka
#      SSL_KEY_ALIAS: ${SSL_KEY_ALIAS}
#      SSL_KEY_STORE_PASSWORD: ${SSL_KEY_STORE_PASSWORD}
      SERVER_PORT: 8082
    tty: true
    stdin_open: true
    depends_on:
      - eureka
    ports:
      - "8082:8082"
    networks:
      server-network:

  eureka:
    build:
      context: eureka
      dockerfile: Dockerfile
    image: eureka-server
    container_name: eureka
    environment:
      SERVER_PORT: 8761
    tty: true
    stdin_open: true
    ports:
      - "8761:8761"
    networks:
      - server-network

  user-service:
    build:
      context: userService
    image: user-server
    container_name: user-server
    depends_on:
      - mongodb
      - postgres
    env_file:
      - ./userService/java.env
    environment:
      EUREKA_URI: http://eureka:8761/eureka
      SERVER_PORT: 8080
      POSTGRES_DATASOURCE_URL: jdbc:postgresql://postgres:5432/high_load_db
      POSTGRES_PASSWORD: example
      POSTGRES_USERNAME: postgres
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: admin_password
      ADMIN_EMAIL: admin@example.com
      JWT_SECRET_KEY: "LJQTjyGnd3oOiVAMssQgG62qDv6xgOdXbRPFKGzWqfU=" #base64
      JWT_EXPIRATION_TIME: 3600000 # 1 hour
      JWT_REFRESH_EXPIRATION_TIME: 86400000 # 1 day
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGO_DB: highLoadDb
    tty: true
    ports:
      - "8080:8080"
    stdin_open: true
    networks:
      - server-network

  event-service:
    build:
      context: eventService
    image: event-server
    container_name: event-server
    depends_on:
      - postgres
      - redis
    env_file:
      - ./eventService/java.env
    environment:
      EUREKA_URI: http://eureka:8761/eureka
      SERVER_PORT: 8081
      POSTGRES_DATASOURCE_URL: jdbc:postgresql://postgres:5432/high_load_db
      POSTGRES_PASSWORD: example
      MINIO_URL: http://minio:9000
      MINIO_PUBLIC_URL: http://localhost:9000
      MINIO_ACCESS_KEY: example-access-key
      MINIO_SECRET_KEY: example-secret-key
      JWT_SECRET_KEY: "LJQTjyGnd3oOiVAMssQgG62qDv6xgOdXbRPFKGzWqfU=" #base64
      REDIS_HOST: redis
      REDIS_PORT: 6379
    tty: true

    ports:
      - "8081:8081"
    stdin_open: true
    networks:
      - server-network

  order-service:
    build:
      context: orderService
    image: order-server
    container_name: order-server
    depends_on:
      - postgres
      - rabbitmq
    env_file:
      - ./orderService/java.env
    environment:
      EUREKA_URI: http://eureka:8761/eureka
      SERVER_PORT: 8083
      POSTGRES_DATASOURCE_URL: jdbc:postgresql://postgres:5432/high_load_db
      POSTGRES_PASSWORD: example
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGO_DB: highLoadDb
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_VHOST: orders
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD: admin
      JWT_SECRET_KEY: "LJQTjyGnd3oOiVAMssQgG62qDv6xgOdXbRPFKGzWqfU=" #base64
    tty: true

    ports:
      - "8083:8083"
    stdin_open: true
    networks:
      - server-network

  web:
    build:
      context: web
    image: web-server
    container_name: web-server
    depends_on:
      - api-gateway
      - user-service
      - event-service
    environment:
      NEXT_PUBLIC_API_URL: http://api-gateway:8082
    ports:
      - "3000:3000"
    networks:
      - server-network

  mongodb:
    image: mongo:8.0.4
    container_name: mongodb
    tty: true
    ports:
      - "27077:27017"
    stdin_open: true
    entrypoint: mongod --bind_ip_all
    volumes:
      - ./mongodb_data:/data/db
    networks:
      server-network:

  postgres:
    image: postgres:17.4
    container_name: postgres-high-load-project
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: high_load_db
      POSTGRES_PASSWORD: example
    networks:
      server-network:
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    container_name: rabbitmq
    ports:
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    restart: unless-stopped
    networks:
      - server-network

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ACCESS_KEY: example-access-key
      MINIO_SECRET_KEY: example-secret-key
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - server-network
    volumes:
      - minio_data:/data
  
  redis:
    image: redis:7.4-alpine
    container_name: redis-high-load-project
    networks:
      - server-network

networks:
  server-network:
    ipam:
      driver: default
      config:
        - subnet: 10.0.15.0/24

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  rabbitmq_data:
    driver: local
